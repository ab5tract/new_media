

Accountability: The curious case of _why the lucky stiff

In August 2009, the enigmatic Ruby programming language hacker \_why the lucky stiff ended his influential cooperations in a dramatically anticlimactic fashion. One day there were thousands of lines of code sitting in various project repositories on his Github user page. On the next, there were none. He made no announcement on any of the various Ruby language mailing lists or newsgroups, even though there were quite a few that existed solely to support projects that he had started and for which he was still seen as a driving force.[^1] All that was available was a cryptic tweet mentioning the depression caused by code being supplanted by better versions, and a sense of tiredness. In the time since he deleted his Twitter account, that tweet too disappeared into the ether. His websites were not responding, including the one hosting his dreamlike, absurdist introduction to programming in Ruby (let alone the soundtrack of original songs he had produced for that book).1 \_why's prominence in the Ruby community was a result of his status as a rogue artist-hacker, a coder who wrote a complete web application framework in under 4 kilobytes. He could solve complex problems with a single, poetic line of Ruby, a practice called he called “golfing.”  In a further example of his unique presence, consider that he famously released the documentation for his new graphical-user interface programming environment in the style of a ransom note.2

[^1]: The

Why then, after all this concentrated effort, would \_why choose to perform the digital equivalent of torching all his hard, and often referenced, work? The code in his repositories did not belong all to him—--scores of people had contributed to his projects over the years. Writing a eulogy for \_why as a deceased online persona, John Resig likened \_why's work and its sudden disappearance to a Tibetan sand mandala.[^resig] Tibetan sand mandalas are not only fragile, they are ritually deconstructed after their ceremonial purpose has been fulfilled. In Resig's opinion, \_why's projects were a carefully constructed online art exhibition that should have never been seen as permanent. He had already closed his blog RedHanded unexpectedly in 2007, after all. To Resig it only made sense that, as an online persona, _why would disappear someday without warning, supposedly once the psuedonym had fulfilled its ceremonial purpose.

This interpretation, replied Zed Shaw in a blog post of his own, is uninformed: “this is not even remotely Buddhist. Buddhists early on figured out that believing only in the impermanence of life leads to callous and indifferent behavior toward others.”4 While Shaw is controversial in his own right for publicly forswearing the Ruby community and likening its Rails subculture to a ghetto in an expletive-laden blog post, he notes that he took great care to ensure that all his Ruby projects found suitable maintainers or would at least remain available online.

  Taking all of your code offline, and erasing your whole persona without so much as a warning or helping people take over projects they spent years investing in is a dickhead thing to do. That’s a rough thing to say, but I feel very strongly about this, because while I respect the attitude of impermanence, I have no respect for someone who has such a complete disregard for other people’s investments and feelings.

  Obviously it’s not all that bad a thing for Jonathan to delete everything, as the code will most likely continue, thanks to distributed version control. What is bad though is that he did it so quickly and violently, without any warning to people who loved him and cared about him. (Shaw 2009)

The unexpected, cryptically announced departure of \_why is confusing because, unlike Shaw, he was not engaged in any high-profile disputes. Thus the implosion of his code and web sites could not be some desperate final act in a public conflagration, a statement in itself. It seemed as if his goal was to achieve a departure that had as little of himself in it. Perhaps this was a measure of trying to avoid the embarrassment of strangers begging him to remain in the community, but instead it left a feeling of disenchantment. If it had seemed that \_why cared a great deal about Ruby when he took the time to produce witty training manuals and even start on implementing a platform for teaching the programming language to children, the day after his departure that sense of concern and commitment had, for many, vanished. Rather than engaging his many colleagues across his active projects and ensuring that someone had his stamp of approval in each one to carry the torch forward, \_why vanished without a trace. Though the sources to his various projects is still available (thanks, as Shaw points out, to the dynamics of distributed version control), they have taken the form of artifacts,5 their future disappeared as surely as \_why's Twitter feed. This is the opposite of the “relatively equal costs” that Spehr asserts as an element of a free cooperation. The capabilities of distributed version control, where every version of the code is authoritative in the sense that it can act as the “official” repository in times of network failure, mean the code still exists. The problem is it is no longer alive. This story is meant to highlight that the idea of 'equipotent' (in Bauwen's words) or 'equivalent-loss' (to paraphrase Spehr) cooperators is problematic in actual P2P practice. Some nodes really are worth more than others. Perhaps Spehr's response would be that the cooperation was not 'free', because the projects relied too much on \_why's presence in them. Even so, it was not necessarily the fact that he left, but the manner of his leaving that effectively closed the coffin on his code. If that code had not been maintained in a distributed version control system, it would have been gone entirely. Though such an effect might be a manifestation of Galloway and Thacker's 'nonexistence', where a “driven exodus or a pointless desertion are equally virtuous in the quest for nonexistence,”6 that is precisely the level at which this advocacy of nonexistence stops making sense. Nothing was said, nothing was gained, and much was lost. In fact the only virtuous process involved was the virtue inherent in the distributed version control software, which kept the source alive despite the mass-self-deletion that coincided with \_why's online implosion.

One year later appears an announcement of a '\_why Tribute Day'


Galloway and Thacker, 2007, p. 99
Cristoph Spehr (2006a). “free cooperation.” 17 January 2006. <http://www.republicart.net/art/concept/alttransspehr_en.htm>
_why the lucky stiff (np). “Why's (Poignant) Guide to Ruby.” <http://mislav.uniqpath.com/poignant-guide/>
_why the lucky stiff (2008). “Nobody Knows Shoes.” <http://cloud.github.com/downloads/shoes/shoes/nks.pdf>
John Resig (2009). “Eulogy to _why.” 19 August 2009. <http://ejohn.org/blog/eulogy-to-_why/>
Zed Shaw (2009). “The Impermanence, Karma, and Bad Behavior of Why the Lucky Stiff.” 21 August 2009. <http://www.zedshaw.com/blog/2009-08-19.html>
Jeremy Rulen (2010). “_why's Estate.” 10 January 2010 (last modified). <http://viewsourcecode.org/why/>
Galloway and Thacker, 2007, p. 136
John Haltiwanger (2009). “Git Virtue? Github and Commons-based Peer Production.” 1 November 2009. <http://mastersofmedia.hum.uva.nl/2009/11/01/git-virtue-github-and-commons-based-peer-production/>
Peter Cooper (2009). "A Cup Full Of Why: 32 Why The Lucky Stiff Links." 20 August 2009. <http://www.rubyinside.com/why-the-lucky-stiff-links-2333.html>


#!/usr/bin/ruby
####################
# %file 	= 	thesis-groomer.rb
# %author	=	John Haltiwanger
# %project	=	Subtextual Processes: 
#					Grammar Intersections Within Generative Design
#
# A project-specific piece of Ruby programming to augment the HTML code
# 	generated by pandoc. In order to support features like <abbr> and to
#	fix the issue of section headers (see the section on workflow constraints
#	in the thesis for which this code was developed).

#$:.unshift( File.dirname(__FILE__) )
#require 'groom'
#include Groom

md_file = ARGV[0] # the name of the markdown file is passed in as the only argument.


in_code = false

input = File.new("#{md_file}", 'r')
basename = File.basename(md_file, '.md')
html = File.new("#{basename}-html.md", 'w')
context = File.new("#{basename}-context.md", 'w')

exclaims = Array.new
questions = Array.new

input.each do |line|
	if line =~ /^#+[\w\s]+#+$/
		unless in_code == true 
			html_line = "##{line.chomp}#"
			html.puts html_line
			context.puts line
		end 
	# !ALWAYS! remember that regex.match() needs parentheses!
	elsif /^~+~$/.match(line)
		in_code = (in_code == false) ? true : false
		html.puts line
		context.puts line	
	elsif m = /^\\chapter\{(.+)\}$/.match(line)
		html.puts "# #{m[1]} #"
		context.puts line
	elsif m2 = /\(\!+(.+)\!\)/.match(line)
		exclaims << [$., $_, m2[1]]
	elsif m3 = /\(\?+(.+)\?\)/.match(line)
		questions << [$., $_, m3[1]]
	else
		html.puts line
		context.puts line
	end
end

puts "Grooming successful \t\t\t\t\t ...... \t[OK]"

print "\n### (! * !) ###\n"
puts "What's all this ruckus about, then?"
exclaims.each do |e|
	print "\n\t\#{e[1]}\"\n"
	print "line #{e[0]}, (#{e[2]})\n"
end

print "\n### (? * ?) ###\n"
puts "You are asking questions, aren't you?"
questions.each do |q|
	print "\n\t\#{q[1]}\"\n"
	print "line #{q[0]}, (#{q[2]})\n"
end
	
puts "\n\n### Conversions happening in sequence ###"
print "Converting #{basename}-html.md to #{basename}.html\t.....\t "
command = Thread.new do
	%x[pandoc -o #{basename}.html -t context -s -N #{basename}-context.md]
end
command.join
puts "[OK]"

print "Converting #{basename}-context.md to #{basename}.tex\t.....\t "
command = Thread.new do
	%x[pandoc -o #{basename}.tex -t context -s -N #{basename}-context.md]
end
command.join
puts "[OK]"

print "Converting #{basename}.tex to #{basename}.pdf\t ..... \t "
command = Thread.new do
	%x[context #{basename}.tex]
end
command.join
puts "[OK]"